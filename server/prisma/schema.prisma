generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url = env("DATABASE_URL")
}

model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String      @unique
  image            String?
  favResidenciesID String[]    @db.ObjectId
  ownedResidencies Residency[] @relation("Owner")

  // Add a plain-text password field
  password         String?

  role             Role        @default(USER)
}

enum Role {
  USER
  ADMIN
}

model Residency {
    id                  String   @id @default(auto()) @map("_id") @db.ObjectId
    owner               User     @relation("Owner", fields: [userEmail], references: [email])
    userEmail           String

    // Property Details
    ownerId             Int?
    title               String
    featured            String?
    featuredWeight      Int?
    description         String
    legalDescription    String? 
    direction           String?
    status              String?
    type                String?
    zoning              String?
    restrictions        String?
    mobileHomeFriendly  String?
    hoaPoa              String?
    hoaFee              Float? 
    hoaPaymentTerms     String? 
    survey              String?
    notes               String?

    // Address and Location
    apnOrPin            String   @unique                     // APN/PIN must be unique
    streetAddress       String
    city                String
    county              String
    state               String
    zip                 String
    latitude            Float                              // Latitude for geolocation
    longitude           Float                               // Longitude for geolocation
    area                String
    landIdLink          String?

    // Physical Attributes
    sqft                Int
    acre                Float?
    imageUrls           Json?

    // Pricing
    askingPrice         Float
    minPrice            Float
    disPrice            Float?
  

    // Financing & Pricing Calculations
    financing          String?
    tax                Float?
    serviceFee         Float?
    term               Int? 
    hoaMonthly         Float?
    interestOne        Float?
    interestTwo        Float?
    interestThree      Float?
    monthlyPaymentOne  Float?
    monthlyPaymentTwo  Float?
    monthlyPaymentThree Float?
    downPaymentOne     Float?
    downPaymentTwo     Float?
    downPaymentThree   Float?
    loanAmountOne      Float?
    loanAmountTwo      Float?
    loanAmountThree    Float?
    purchasePrice      Float?
    financedPrice      Float?

    

    // Utilities and Infrastructure
    water               String?
    sewer               String?
    electric            String?
    roadCondition       String?
    floodplain          String?

    // Miscellaneous
    ltag                String? 
    rtag                String?   
    landId              String
    viewCount           Int?      @default(0)                 // View count for unique views

    // Timestamps
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    // Unique Constraints
    @@unique(fields: [apnOrPin, streetAddress, city, state, userEmail])  // Prevent duplicate listings by the same user
    @@unique(fields: [latitude, longitude])                              // Ensure no duplicate geolocations
}



model Offer {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    propertyId  String
    offeredPrice Float
    timestamp   DateTime @default(now())
    buyerId     String   @db.ObjectId 
    buyer       Buyer    @relation("BuyerOffers", fields: [buyerId], references: [id])
}

model Buyer {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    email      String   @unique
    phone      String   @unique
    buyerType  BuyerType
    firstName  String
    lastName   String
    offers     Offer[] @relation("BuyerOffers")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

enum BuyerType {
    CashBuyer
    Builder
    Developer
    Realtor
    Investor
    Wholesaler
} 



//----------------------  Modifcations for Qualifcations----------------------//

// Add this to your existing schema.prisma file

model Qualification {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  propertyId             String?   // ID of the property being qualified for
  propertyPrice          Float    // Asking or financed price
  loanAmount             Float?   // Selected loan amount
  interestRate           Float?   // Selected interest rate
  monthlyPayment         Float?   // Calculated monthly payment
  downPayment            Float?   // Selected down payment amount
  term                   Int?     // Loan term in months
  
  // Survey answers
  language               String?
  homeUsage              String?  // Primary residence, Secondary/Vacation, Investment
  realEstateAgent        String?  // Yes/No
  homePurchaseTiming     String?  // When they plan to purchase
  currentHomeOwnership   String?  // Current living situation
  currentOnAllPayments   String?  // Yes/No
  downPaymentPercentage  String?  // Selected down payment percentage
  employmentStatus       String?  // Employed, Self-Employed, Not Employed, Retired
  verifyIncome           String?  // Yes/No can verify income
  incomeHistory          String?  // Has 2-year income history
  openCreditLines        String?  // Yes/No has open credit lines
  totalMonthlyPayments   Float?   // Their current debt payments
  grossAnnualIncome      String?  // Income range
  foreclosureForbearance String?  // Yes/No in foreclosure
  declaredBankruptcy     String?  // Yes/No bankruptcy
  currentCreditScore     String?  // Credit score range
  liensOrJudgments       String?  // Yes/No has liens
  
  // Personal information
  firstName              String
  lastName               String
  email                  String
  phone                  String
  
  // Status
  qualified              Boolean  @default(false)
  disqualificationReason String?
  
  // Property info passed from Landivo
  propertyAddress        String?
  propertyCity           String?
  propertyState          String?
  propertyZip            String?
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}